import array

class PersistentArray:
    """
    Персистентный массив, использующий массивы для хранения данных.
    
    Этот класс реализует персистентный массив, поддерживающий 
    сохранение истории изменений. 
    Каждый раз, когда в массиве происходит изменение, создается 
    его новая версия, что позволяет восстанавливать состояние 
    массива на предыдущие версии.

    Атрибуты:
        dtype (str): Тип данных элементов массива. Например, 'i' для целых чисел.
        max_size (int, optional): Максимальный размер массива. Если не задан, 
        по умолчанию 1024.
        history (list): История состояний массива. Каждое состояние сохраняется 
        при изменении.
        current_state (array.array): Текущее состояние массива.

    Методы:
        __init__(self, dtype='i', max_size=None): Инициализация персистентного массива.
        size(self): Возвращает количество элементов в массиве.
        get(self, index): Возвращает элемент по индексу.
        insert(self, index, value): Устанавливает значение элемента массива по индексу.
        add(self, value): Добавляет новый элемент в конец массива.
        remove(self, index): Удаляет элемент по индексу.
        _check_index(self, index): Проверяет, является ли индекс допустимым для массива.
        _save_to_history(self, new_state): Сохраняет текущее состояние массива в историю.
        get_version(self, version): Возвращает массив на определенную версию из истории.
        update_version(self, version): Обновляет текущий массив на указанную версию из истории.
        clear(self): Очищает массив, устанавливая его в начальное состояние.
        clone(self): Создает копию текущего массива.
        __getitem__(self, index): Доступ к элементу массива по индексу (аналогично методу `get`).
        __setitem__(self, index, value): Заменяет элемент массива по индексу (аналогично методу `set`).
    """
    
    def __init__(self, dtype='i', max_size=None):
        """
        Инициализация персистентного массива.
        
        При создании массива задается тип данных элементов и максимальный размер массива (если он задан).
        Массив начинает с пустого состояния.

        Параметры:
            dtype (str): Тип данных элементов массива (по умолчанию 'i' для целых чисел).
            max_size (int, optional): Максимальный размер массива (по умолчанию 1024).
        """
        self.dtype = dtype
        self.max_size = max_size or 1024
        self.history = []
        self.current_state = array.array(self.dtype)

    def size(self):
        """
        Возвращает количество элементов в массиве.
        
        Этот метод позволяет использовать встроенную функцию `len()` для получения длины массива.

        Возвращает:
            int: Количество элементов в массиве.
        """
        return len(self.current_state)

    def get(self, index):
        """
        Возвращает элемент по индексу.

        Этот метод проверяет, что индекс находится в пределах допустимого диапазона, и возвращает 
        элемент на указанном индексе.

        Параметры:
            index (int): Индекс элемента в массиве.

        Возвращает:
            element: Элемент массива на указанном индексе.

        Исключения:
            IndexError: Если индекс выходит за пределы массива.
        """
        self._check_index(index)
        return self.current_state[index]

    def insert(self, index, value):
        """
        Устанавливает значение элемента массива по указанному индексу.

        Этот метод создает новую версию массива, в которой на указанном индексе будет 
        установлено новое значение. Состояние массива сохраняется в историю, обеспечивая персистентность.

        Параметры:
            index (int): Индекс элемента, который нужно изменить.
            value (any): Новое значение для элемента.

        Исключения:
            IndexError: Если индекс выходит за пределы массива.
        """
        self._check_index(index)
        new_state = array.array(self.dtype, self.current_state[:index] + array.array(self.dtype, [value]) + self.current_state[index:])
        self._save_to_history(new_state)

    def add(self, value):
        """
        Добавляет новый элемент в конец массива.

        Этот метод создает новую версию массива, добавляя новый элемент в его конец и сохраняя 
        состояние массива в историю изменений.

        Параметры:
            value (any): Элемент, который нужно добавить в массив.
        """
        new_state = self.current_state + array.array(self.dtype, [value])
        self._save_to_history(new_state)

    def remove(self, index):
        """
        Удаляет элемент по указанному индексу.

        Этот метод создает новую версию массива, в которой элемент по указанному индексу удален. 
        Также сохраняется состояние массива в историю.

        Параметры:
            index (int): Индекс элемента, который нужно удалить.

        Исключения:
            IndexError: Если индекс выходит за пределы массива.
        """
        self._check_index(index)
        new_state = self.current_state[:index] + self.current_state[index + 1:]
        self._save_to_history(new_state)

    def _check_index(self, index):
        """
        Проверяет, является ли индекс допустимым для текущего состояния массива.

        Этот метод проверяет, находится ли индекс в пределах допустимых значений, если нет — выбрасывает исключение.

        Параметры:
            index (int): Индекс для проверки.

        Исключения:
            IndexError: Если индекс выходит за пределы массива.
        """
        if index < 0 or index >= len(self.current_state):
            raise IndexError("Неверный индекс")

    def _save_to_history(self, new_state):
        """
        Сохраняет текущее состояние массива в историю изменений.

        Этот метод сохраняет текущее состояние массива в истории и обновляет его на новое состояние. 
        Таким образом, массив сохраняет свою версионность.

        Параметры:
            new_state (array.array): Новое состояние массива, которое будет сохранено в истории.
        """
        self.history.append(self.current_state)
        self.current_state = new_state

    def get_version(self, version):
        """
        Возвращает массив на определенную версию из истории.

        Этот метод позволяет восстановить состояние массива на конкретную версию из истории изменений.

        Параметры:
            version (int): Индекс версии в истории.

        Возвращает:
            array.array: Массив на указанную версию.

        Исключения:
            ValueError: Если запрашиваемая версия не существует.
        """
        if version < 0 or version >= len(self.history):
            raise ValueError("Неверная версия")
        return self.history[version]

    def update_version(self, version):
        """
        Обновляет текущий массив на указанную версию из истории.

        Этот метод позволяет переключаться на предыдущие версии массива, восстанавливая его состояние
        на указанную версию.

        Параметры:
            version (int): Индекс версии в истории.

        Исключения:
            ValueError: Если запрашиваемая версия не существует.
        """
        if version < 0 or version >= len(self.history):
            raise ValueError("Неверная версия")
        self.current_state = self.history[version]

    def clear(self):
        """
        Очищает массив, устанавливая его в начальное состояние.

        Этот метод очищает массив, создавая его пустую версию, и сохраняет это состояние в истории.

        Исключения:
            None
        """
        self._save_to_history(array.array(self.dtype))

    def clone(self):
        """
        Создает копию текущего массива.

        Этот метод создает новый экземпляр класса `PersistentArray`, который является копией текущего
        состояния и истории изменений массива.

        Возвращает:
            PersistentArray: Копия текущего массива, включая его историю.
        """
        cloned_array = PersistentArray(self.dtype)
        cloned_array.current_state = self.current_state[:]
        cloned_array.history = self.history[:]
        return cloned_array

    def __getitem__(self, index):
        """
        Доступ к элементу массива по индексу (аналогично методу `get`).

        Этот метод позволяет обращаться к элементу массива по индексу с помощью квадратных скобок.

        Параметры:
            index (int): Индекс элемента массива.

        Возвращает:
            element: Элемент массива на указанном индексе.
        """
        return self.get(index)

    def __setitem__(self, index, value):
        """
        Заменяет элемент массива по индексу (аналогично методу `set`).

        Этот метод позволяет заменять элемент массива по индексу с помощью квадратных скобок.

        Параметры:
            index (int): Индекс элемента, который нужно изменить.
            value (any): Новое значение для элемента.
        """
        self.set(index, value)
